apiVersion: v1
data:
  application.resourceTrackingMethod: annotation
  admin.enabled: 'false'
  statusbadge.enabled: 'true'
  users.anonymous.enabled: 'true'
  ga.trackingid: 'UA-105170809-6'
  url: https://argocd.andrewpjackson.com
  configManagementPlugins: |
    - name: flux
      generate:
        command: [sh, -c]
        args: ["argocd-flux-plugin . --path $GIT_PATH"]
  # dex.config: |
  #   connectors:
  #   - type: github
  #     id: github
  #     name: GitHub
  #     config:
  #       clientID: fb563b3a8dd7ea52f683
  #       clientSecret: $dex.github.clientSecret
  #       orgs:
  #       - name: argoproj
  #         teams:
  #         - argo-cd-admins
  oidc.config: |
    name: Authentik
    issuer: https://authentik.andrewpjackson.com/application/o/argocd/
    clientID: $oidc.authentik.clientId
    clientSecret: $oidc.authentik.clientSecret
    requestedScopes:
      - openid
      - profile
      - email
      - groups
  rbac.create: 'true'
  rbac.policy.default: ''
  rbac.policy.csv: |
      g, Argo Admins, role:admin
  rbac.scopes: "[groups]"


  rbac:
    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
    # If false, it is expected the configmap will be created by something else.
    # Argo CD will not work if there is no configmap created with the name above.
    create: true

    # -- Annotations to be added to argocd-rbac-cm configmap
    annotations: {}

    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    policy.default: ''

    # -- File containing user-defined policies and role definitions.
    # @default -- `''` (See [values.yaml])
    # policy.csv: ''
    # Policy rules are in the form:
    #  p, subject, resource, action, object, effect
    # Role definitions and bindings are in the form:
    #  g, subject, inherited-subject
    policy.csv: |
      g, Argo Admins, role:admin

    # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
    # The scope value can be a string, or a list of strings.
    scopes: "[groups]"


kind: ConfigMap
metadata:
  name: argocd-cm
